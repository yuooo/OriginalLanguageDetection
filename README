README for our project:
Search for a name to find instructions as explained by that person. So search MATT for code that Matt wrote, JESSICA for Jessica's and LAKSHMI for Lakshmi's.


MATT:
TOC:
SplitFile
MassPreprocessor

SplitFile: (Now does trees)
CHANGES:
-two new options: -trainall and -testall. this puts as many complete files as can possibly be put by setting trainFiles/testFile counts to MAX_INT, respectively.
 only one can be selected at a time, otherwise the program will exit.
-Now defaults train and test numbers are 0.
-Doesn't make the directories when they're not needed.

Allows a user to split either text files or tree files. Both use \n to delimit, but differ slightly in delimitation:
      Text uses \n to delimit per sentence
      Tree delimits using \n as the only character on the line to note that a tree has finished.

User can indicate number of files they want using -trainnum # and -testnum # to determine. The sum of those make the number of files extracted.
      Defaults are 19 and 1 for train and test, respectively.
      The train files will be written first, then the test files will be written second. Example, with 19 train files and 1 test file, our code writes 19 files first for training, then 1 for testing.

 The command should look something like this (hyphenated command order doesn't matter... BUT must have options, then root_directory must be first and destination_directory must be second!)

      SplitFile -tree/-text [-seednum #] [-trainall/-trainnum #] [-testall/-testnum #] source_directory destination_directory

Arguments explained below.

-tree/text: Need to call either -tree or -text or neither will execute. Can't call both in one run, otherwise you get an error message.
      -text uses \n to delimit per sentence
      -tree delimits using \n as the only character on the line to note that a Penn tree has finished.  

-seednum: Set the number of seeds per file by using the -seeds option. Default is 100.

-trainall: Sets number of train files to be generated to an impractical number, forcing the code to exit when the reader is finished reading lines.
    Also throws away the last file as it is most likely incomplete.
-trainnum: Sets the number of files to write to create our training set, per novel. Default is 0.


source_directory: Needs to have languages in subdirectories, and these languages contain the novels in text or tree format.

destination_directory: Will write into this directory (it doesn't need to exist yet) train/ and test/ directories. From each, the languages, and all chunks of all novels will be written in there.

***************************************

UPDATED: -oneNovelName now takes in the whole path, instead of having to split the name and rootDirectory.

MassPreprocessor: This flexible class takes a novel in text format and prints out either one of two things (or possibly both):
    -a tokenized text file (one sentence per line), or
    -a Penn tree file, one sentence per tree.

Usage: MassPreprocessor [-text] [-tree] [-oneNovel novelName] [-textDirectory directory] [-treeDirectory directory]  [rootDirectory]

Arguments: (all are optional except for rootDirectory, but you won't get very far without stating either -text or -tree.
        -text: returns text files.
        -tree: returns tree files.
            Both -text and -tree can be called at the same time.
        -oneNovel novel_file: runs only for novel_file. Please include the path in the name (Local or absolute path names are both OK). Also rootDirectory will not be read anymore.
        -textDirectory directory: Text output will go into the Data/directory directory instead of the default directory created by the code (txt_sentence_blocks_merged).
        -treeDirectory directory: Tree output will go into the Data/directory directory instead of the default directory created by the code (trees_merged).
            NOTE: Only a name must be provided for -textDirectory and -treeDirectory. DO NOT provide the whole directory, otherwise it won't work.
            These will both write into
        rootDirectory the directory in which files are to be converted.
            If doing a batch job, Subdirectories of rootDirectory need to have language names, and in those lie the novels.
            If running for just one novel, rootDirectory MUST be the language in which the novel originates.



JESSICA:







LAKSHMI: